name: Release Extension

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配语义化版本标签，如 v1.0.0, v2.1.3

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # 需要写权限来创建 release
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Compile TypeScript
        run: npm run compile
        
      - name: Run tests
        run: npm test
        continue-on-error: true  # 即使测试失败也继续，但会在日志中显示
        
      - name: Install vsce
        run: npm install -g @vscode/vsce
        
      - name: Package extension
        run: npm run package
        
      - name: Get package info
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "filename=$PACKAGE_NAME-$PACKAGE_VERSION.vsix" >> $GITHUB_OUTPUT
          
      - name: Verify package file exists
        run: |
          if [ ! -f "${{ steps.package.outputs.filename }}" ]; then
            echo "Package file not found: ${{ steps.package.outputs.filename }}"
            ls -la *.vsix || echo "No .vsix files found"
            exit 1
          fi
          echo "Package file verified: ${{ steps.package.outputs.filename }}"
          
      - name: Extract tag version
        id: tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $TAG_VERSION"
          
      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Release ${{ steps.tag.outputs.version }}
          
          ### 📦 安装方式
          
          1. **直接下载安装**：
             - 下载下方的 `.vsix` 文件
             - 在 VS Code 中按 `Ctrl+Shift+P` (Windows/Linux) 或 `Cmd+Shift+P` (Mac)
             - 输入 "Extensions: Install from VSIX..."
             - 选择下载的 `.vsix` 文件进行安装
          
          2. **命令行安装**：
             ```bash
             code --install-extension ${{ steps.package.outputs.filename }}
             ```
          
          ### 📋 扩展信息
          - **扩展名称**: ${{ steps.package.outputs.name }}
          - **版本**: ${{ steps.package.outputs.version }}
          - **文件大小**: $(du -h ${{ steps.package.outputs.filename }} | cut -f1)
          
          ### 🔧 系统要求
          - VS Code 版本: >= 1.74.0
          - Node.js 版本: >= 18.0.0
          
          ---
          
          > 💡 如果您在使用过程中遇到任何问题，请在 [Issues](https://github.com/${{ github.repository }}/issues) 中反馈。
          EOF
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          name: "Release ${{ steps.tag.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.version, '-') }}  # 如果版本包含 '-' 则标记为预发布
          files: |
            ${{ steps.package.outputs.filename }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-package-${{ steps.tag.outputs.version }}
          path: |
            ${{ steps.package.outputs.filename }}
            release_notes.md
          retention-days: 30
          
      - name: Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Extension packaged successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Package Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Name: \`${{ steps.package.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`${{ steps.package.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- File: \`${{ steps.package.outputs.filename }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Size: \`$(du -h ${{ steps.package.outputs.filename }} | cut -f1)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Release URL:** [${{ steps.tag.outputs.version }}](${{ steps.create_release.outputs.url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Installation:** Users can now download and install the extension from the release page!" >> $GITHUB_STEP_SUMMARY